# trigger: none 

# resources: #Step 5: Uncomment lines 1-7 and remove lines 9 - 14
#   pipelines:
#   - pipeline: InfrastructurePipelne
#     source: 'BuildTestStage-apiWebApp (run 1st)'
#     trigger: true

resources:
  repositories:
    - repository: self
      type: git  
      ref: refs/heads/main
      trigger: none
variables:
- group: 'Infrastructure-Build'
- template: 'variables.yml'

stages:
- stage: Terraform_Plan
  displayName: Terraform Planning
  dependsOn: []
  jobs:
  - job: Plan
    timeoutInMinutes: 0
    continueOnError: false
    
    steps:
    - checkout: self
    - task: replacetokens@3
      inputs:
        rootDirectory: '${{ variables.infraDirectory }}'
        targetFiles: |
          **/*.tf
          **/*.tfvars
        encoding: 'auto'
        writeBOM: true
        escapeType: 'none'
        actionOnMissing: 'warn'
        keepToken: false
        tokenPrefix: '!__'
        tokenSuffix: '__!'
        useLegacyPattern: false
        enableTelemetry: true    
    - task: TerraformInstaller@0
      displayName: 'terraform version installer'
      inputs:
        terraformVersion: '${{ variables.terraformVersion }}'
    - task: TerraformTaskV1@0
      displayName: 'terraform init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '${{ variables.infraDirectory }}'
        backendServiceArm: '${{ variables.servicePrincipal }}'
        backendAzureRmResourceGroupName: '${{ variables.resourceGroup }}'
        backendAzureRmStorageAccountName: '${{ variables.storageAccountName }}'
        backendAzureRmContainerName: '${{ variables.storageContainerName }}'
        backendAzureRmKey: '${{ variables.storageKey }}'
    - task: TerraformTaskV1@0
      displayName: 'terraform validate' 
      inputs:
        provider: 'azurerm'
        command: 'validate'        
        workingDirectory: '${{ variables.infraDirectory }}'
    - task: TerraformTaskV1@0
      displayName: 'terraform plan'
      timeoutInMinutes: 0
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '${{ variables.infraDirectory }}'
        commandOptions: '${{ variables.variableFile }}'
        environmentServiceNameAzureRM: '${{ variables.servicePrincipal }}'
    
- stage: Terraform_Apply
  displayName: Terraform Apply
  dependsOn: [Terraform_Plan]
  jobs:
  #- deployment: Apply
    #environment: 'DEV'
  - job:
    timeoutInMinutes: 0
    continueOnError: false
    steps:
    - checkout: self
    - task: replacetokens@3
      inputs:
        rootDirectory: '${{ variables.infraDirectory }}'
        targetFiles: |
          **/*.tf
          **/*.tfvars
        encoding: 'auto'
        writeBOM: true
        escapeType: 'none'
        actionOnMissing: 'warn'
        keepToken: false
        tokenPrefix: '!__'
        tokenSuffix: '__!'
        useLegacyPattern: false
        enableTelemetry: true       
    - task: TerraformInstaller@0
      displayName: 'terraform version installer'
      inputs:
        terraformVersion: '${{ variables.terraformVersion }}'
    - task: TerraformTaskV1@0
      displayName: 'terraform init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '${{ variables.infraDirectory }}'
        backendServiceArm: '${{ variables.servicePrincipal }}'
        backendAzureRmResourceGroupName: '${{ variables.resourceGroup }}'
        backendAzureRmStorageAccountName: '${{ variables.storageAccountName }}'
        backendAzureRmContainerName: '${{ variables.storageContainerName }}'
        backendAzureRmKey: '${{ variables.storageKey }}'  
    - task: TerraformTaskV1@0
      displayName: 'terraform validate' 
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '${{ variables.infraDirectory }}'
    - task: TerraformTaskV1@0
      displayName: 'terraform plan'
      timeoutInMinutes: 0
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '${{ variables.infraDirectory }}'
        commandOptions: '${{ variables.variableFile }}'
        environmentServiceNameAzureRM: '${{ variables.servicePrincipal }}'  
    - task: TerraformTaskV1@0
      displayName: 'terraform apply'
      timeoutInMinutes: 0
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '${{ variables.infraDirectory }}'
        commandOptions: '${{ variables.variableFile }}'
        environmentServiceNameAzureRM: '${{ variables.servicePrincipal }}'
